{"ast":null,"code":"var _jsxFileName = \"/Users/allison/Documents/repos/portfolio/src/components/Accordion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styles from '../styles/accordion.module.scss';\nimport classes from 'classnames';\nimport arrowUp from '../images/icons/arrow-up-thin.svg';\nimport arrowDown from '../images/icons/arrow-down-thin.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Accordion() {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false); // toggle the state of the accordion, triggered onclick\n\n  function handleToggle() {\n    setIsOpen(!isOpen);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.accordionHeader,\n      onClick: () => {\n        handleToggle();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: isOpen ? arrowUp : arrowDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes(styles.accordionContent, {\n        [styles.open]: isOpen\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"inside content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"hello!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Accordion, \"wI4RD8C1tVsUvnhO13IbxY3XhiQ=\");\n\n_c = Accordion;\n;\nexport default Accordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"sources":["/Users/allison/Documents/repos/portfolio/src/components/Accordion.js"],"names":["React","useState","styles","classes","arrowUp","arrowDown","Accordion","isOpen","setIsOpen","handleToggle","accordionHeader","accordionContent","open"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AAEjB,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC,CAFiB,CAIjB;;AACA,WAASQ,YAAT,GAAwB;AACpBD,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH;;AAAA;AAED,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEL,MAAM,CAACQ,eAAvB;AACA,MAAA,OAAO,EAAE,MAAM;AAAED,QAAAA,YAAY;AAAI,OADjC;AAAA,8BAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAQF,MAAM,GAAGH,OAAH,GAAaC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAK,MAAA,SAAS,EAAGF,OAAO,CAAED,MAAM,CAACS,gBAAT,EAA2B;AAAE,SAACT,MAAM,CAACU,IAAR,GAAgBL;AAAlB,OAA3B,CAAxB;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAxBQD,S;;KAAAA,S;AAwBR;AAED,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport styles from '../styles/accordion.module.scss';\nimport classes from 'classnames';\nimport arrowUp from '../images/icons/arrow-up-thin.svg';\nimport arrowDown from '../images/icons/arrow-down-thin.svg';\n\n\nfunction Accordion() {\n\n    const [ isOpen, setIsOpen ] = useState(false);\n    \n    // toggle the state of the accordion, triggered onclick\n    function handleToggle() {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <div>\n            <div className={styles.accordionHeader}\n            onClick={() => { handleToggle() } }>\n                {/* needs to take the section title passed from the specific Accordion (design, etc) and display it as a title */}\n                <h2>title</h2>\n                <span>{ isOpen ? arrowUp : arrowDown }</span>\n            </div>\n            <div className={ classes( styles.accordionContent, { [styles.open] : isOpen} ) } >\n                {/* this needs to hold the content */}\n                <p>inside content</p>\n                <p>hello!</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Accordion;"]},"metadata":{},"sourceType":"module"}