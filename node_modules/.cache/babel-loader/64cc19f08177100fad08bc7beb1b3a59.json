{"ast":null,"code":"var _jsxFileName = \"/Users/allison/Documents/repos/portfolio/src/components/Accordion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from 'classnames';\nimport styles from '../styles/accordion.module.scss';\nimport arrowUp from '../images/icons/arrow-up-thin.svg';\nimport arrowDown from '../images/icons/arrow-down-thin.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Accordion(_ref) {\n  _s();\n\n  let {\n    section,\n    project\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false); // toggle the state of the accordion, triggered onClick\n\n  function handleToggle() {\n    setIsOpen(!isOpen);\n  }\n\n  ; //let header = project.acf[section]_header;\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.accordionHeader,\n      onClick: () => {\n        handleToggle();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: section\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: isOpen ? arrowUp : arrowDown,\n        alt: \"accordion open/close icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes(styles.accordionContent, {\n        [styles.open]: isOpen\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"section sub-heading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Accordion, \"wI4RD8C1tVsUvnhO13IbxY3XhiQ=\");\n\n_c = Accordion;\n;\nexport default Accordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"sources":["/Users/allison/Documents/repos/portfolio/src/components/Accordion.js"],"names":["React","useState","classes","styles","arrowUp","arrowDown","Accordion","section","project","isOpen","setIsOpen","handleToggle","accordionHeader","accordionContent","open"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;;;AAIA,SAASC,SAAT,OAAyC;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAsB;AAErC,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC,CAFqC,CAIrC;;AACA,WAASU,YAAT,GAAwB;AACpBD,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH;;AAAA,GAPoC,CASrC;;AAEA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEN,MAAM,CAACS,eAAvB;AACA,MAAA,OAAO,EAAE,MAAM;AAAED,QAAAA,YAAY;AAAI,OADjC;AAAA,8BAGI;AAAA,kBAAKJ;AAAL;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAK,QAAA,GAAG,EAAGE,MAAM,GAAGL,OAAH,GAAaC,SAA9B;AAA0C,QAAA,GAAG,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAK,MAAA,SAAS,EAAGH,OAAO,CAAEC,MAAM,CAACU,gBAAT,EAA2B;AAAE,SAACV,MAAM,CAACW,IAAR,GAAgBL;AAAlB,OAA3B,CAAxB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA1BQH,S;;KAAAA,S;AA0BR;AAED,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport classes from 'classnames';\nimport styles from '../styles/accordion.module.scss';\nimport arrowUp from '../images/icons/arrow-up-thin.svg';\nimport arrowDown from '../images/icons/arrow-down-thin.svg';\n\n\n\nfunction Accordion({ section, project }) {\n\n    const [ isOpen, setIsOpen ] = useState(false);\n    \n    // toggle the state of the accordion, triggered onClick\n    function handleToggle() {\n        setIsOpen(!isOpen);\n    };\n\n    //let header = project.acf[section]_header;\n\n    return (\n        <section>\n            <div className={styles.accordionHeader}\n            onClick={() => { handleToggle() } }>\n                {/* needs to take the section title passed from the specific Accordion (design, etc) and display it as a title */}\n                <h2>{section}</h2>\n                <img src={ isOpen ? arrowUp : arrowDown } alt=\"accordion open/close icon\" />\n               {/* can I pass the process/design/dev to select the type of content? */}\n            </div>\n            <div className={ classes( styles.accordionContent, { [styles.open] : isOpen} ) }>\n                <h3>section sub-heading</h3>\n                <p>content</p>\n            </div> \n        </section>\n    )\n};\n\nexport default Accordion;"]},"metadata":{},"sourceType":"module"}