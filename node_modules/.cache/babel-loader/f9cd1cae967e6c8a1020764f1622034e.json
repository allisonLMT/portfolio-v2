{"ast":null,"code":"var _jsxFileName = \"/Users/allison/Documents/repos/portfolio/src/components/Accordion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from 'classnames';\nimport styles from '../styles/accordion.module.scss';\nimport arrowUp from '../images/icons/arrow-up-thin.svg';\nimport arrowDown from '../images/icons/arrow-down-thin.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Accordion(_ref) {\n  _s();\n\n  let {\n    section,\n    project\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false); // toggle the state of the accordion, triggered onClick\n\n  function handleToggle() {\n    setIsOpen(!isOpen);\n  }\n\n  ;\n  let header = project.acf[section + \"_header\"];\n  let content = project.acf[section + \"_content\"];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.accordionHeader,\n      onClick: () => {\n        handleToggle();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: header\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: isOpen ? arrowUp : arrowDown,\n        alt: \"accordion open/close icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes(styles.accordionContent, {\n        [styles.open]: isOpen\n      }),\n      children: Array.isArray(project.acf[section + \"_content\"]) === true && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: content.map((oneRow, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: oneRow.content\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Accordion, \"wI4RD8C1tVsUvnhO13IbxY3XhiQ=\");\n\n_c = Accordion;\n;\nexport default Accordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"sources":["/Users/allison/Documents/repos/portfolio/src/components/Accordion.js"],"names":["React","useState","classes","styles","arrowUp","arrowDown","Accordion","section","project","isOpen","setIsOpen","handleToggle","header","acf","content","accordionHeader","accordionContent","open","Array","isArray","map","oneRow","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;;;AAIA,SAASC,SAAT,OAAyC;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAsB;AAErC,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC,CAFqC,CAIrC;;AACA,WAASU,YAAT,GAAwB;AACpBD,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH;;AAAA;AAED,MAAIG,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYN,OAAO,GAAC,SAApB,CAAb;AACA,MAAIO,OAAO,GAAGN,OAAO,CAACK,GAAR,CAAYN,OAAO,GAAC,UAApB,CAAd;AAEA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEJ,MAAM,CAACY,eAAvB;AACA,MAAA,OAAO,EAAE,MAAM;AAAEJ,QAAAA,YAAY;AAAI,OADjC;AAAA,8BAEI;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,GAAG,EAAGH,MAAM,GAAGL,OAAH,GAAaC,SAA9B;AAA0C,QAAA,GAAG,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAGH,OAAO,CAAEC,MAAM,CAACa,gBAAT,EAA2B;AAAE,SAACb,MAAM,CAACc,IAAR,GAAgBR;AAAlB,OAA3B,CAAxB;AAAA,gBACMS,KAAK,CAACC,OAAN,CAAcX,OAAO,CAACK,GAAR,CAAYN,OAAO,GAAC,UAApB,CAAd,MAAmD,IAAnD,iBACE;AAAA,+BACI;AAAA,oBACKO,OAAO,CAACM,GAAR,CAAY,CAACC,MAAD,EAASC,CAAT,kBACT;AAAA,sBAAaD,MAAM,CAACP;AAApB,aAASQ,CAAT;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAhCQhB,S;;KAAAA,S;AAgCR;AAED,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport classes from 'classnames';\nimport styles from '../styles/accordion.module.scss';\nimport arrowUp from '../images/icons/arrow-up-thin.svg';\nimport arrowDown from '../images/icons/arrow-down-thin.svg';\n\n\n\nfunction Accordion({ section, project }) {\n\n    const [ isOpen, setIsOpen ] = useState(false);\n    \n    // toggle the state of the accordion, triggered onClick\n    function handleToggle() {\n        setIsOpen(!isOpen);\n    };\n\n    let header = project.acf[section+\"_header\"];\n    let content = project.acf[section+\"_content\"];\n\n    return (\n        <section>\n            <div className={styles.accordionHeader}\n            onClick={() => { handleToggle() } }>\n                <h2>{header}</h2>\n                <img src={ isOpen ? arrowUp : arrowDown } alt=\"accordion open/close icon\" />\n            </div>\n            <div className={ classes( styles.accordionContent, { [styles.open] : isOpen} ) }>\n                { Array.isArray(project.acf[section+\"_content\"]) === true &&\n                    <div>\n                        <ul>\n                            {content.map((oneRow, i) => \n                                <li key={i}>{oneRow.content}</li>\n                            )}\n                        </ul>\n                    </div>\n                }\n            </div> \n        </section>\n    )\n};\n\nexport default Accordion;"]},"metadata":{},"sourceType":"module"}