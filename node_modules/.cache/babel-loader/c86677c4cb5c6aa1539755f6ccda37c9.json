{"ast":null,"code":"var _jsxFileName = \"/Users/allison/Documents/repos/portfolio/src/components/Accordion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport classes from 'classnames';\nimport Highlight from 'react-highlight';\nimport styles from '../styles/accordion.module.scss';\nimport { ReactComponent as ArrowUp } from '../images/icons/arrow-up.svg';\nimport { ReactComponent as ArrowDown } from '../images/icons/arrow-down.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Accordion(_ref) {\n  _s();\n\n  let {\n    section,\n    project,\n    closeAccordion\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (closeAccordion === true) {//     //setIsOpen(false);\n    //     console.log('close it')\n  }\n\n  ; // toggle the state of the accordion, triggered onClick\n\n  function handleToggle() {\n    setIsOpen(!isOpen);\n  }\n\n  ;\n  let header = project.acf[section + \"_header\"];\n  let content = project.acf[section + \"_content\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: content && /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.accordionSection,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes(styles.accordionHeader, isOpen && styles.headerActive),\n        onClick: () => {\n          handleToggle();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), isOpen ? /*#__PURE__*/_jsxDEV(ArrowUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(ArrowDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes(styles.accordionContent, {\n          [styles.open]: isOpen\n        }),\n        children: Array.isArray(project.acf[section + \"_content\"]) && /*#__PURE__*/_jsxDEV(\"section\", {\n          children: content.map((oneRow, i) => /*#__PURE__*/_jsxDEV(\"section\", {\n            children: [oneRow.development_sub_header && /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: oneRow.development_sub_header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [oneRow.content, oneRow.code_snippet && /*#__PURE__*/_jsxDEV(Highlight, {\n                  className: \"hljs\",\n                  children: oneRow.code_snippet\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Accordion, \"wI4RD8C1tVsUvnhO13IbxY3XhiQ=\");\n\n_c = Accordion;\n;\nexport default Accordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"sources":["/Users/allison/Documents/repos/portfolio/src/components/Accordion.js"],"names":["React","useState","Fragment","classes","Highlight","styles","ReactComponent","ArrowUp","ArrowDown","Accordion","section","project","closeAccordion","isOpen","setIsOpen","handleToggle","header","acf","content","accordionSection","accordionHeader","headerActive","accordionContent","open","Array","isArray","map","oneRow","i","development_sub_header","code_snippet"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,SAAQC,cAAc,IAAIC,OAA1B,QAAwC,8BAAxC;AACA,SAAQD,cAAc,IAAIE,SAA1B,QAA0C,gCAA1C;;;;AAGA,SAASC,SAAT,OAAyD;AAAA;;AAAA,MAAtC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,GAAsC;AAErD,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;;AAEC,MAAIW,cAAc,KAAK,IAAvB,EAA6B,CAC9B;AACA;AACC;;AAAA,GAPoD,CASrD;;AACA,WAASG,YAAT,GAAwB;AACpBD,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH;;AAAA;AAED,MAAIG,MAAM,GAAGL,OAAO,CAACM,GAAR,CAAYP,OAAO,GAAC,SAApB,CAAb;AACA,MAAIQ,OAAO,GAAGP,OAAO,CAACM,GAAR,CAAYP,OAAO,GAAC,UAApB,CAAd;AAEA,sBACI;AAAA,cAEKQ,OAAO,iBACR;AAAS,MAAA,SAAS,EAAEb,MAAM,CAACc,gBAA3B;AAAA,8BACI;AAAK,QAAA,SAAS,EAAEhB,OAAO,CAACE,MAAM,CAACe,eAAR,EAA0BP,MAAM,IAAIR,MAAM,CAACgB,YAA3C,CAAvB;AACI,QAAA,OAAO,EAAE,MAAM;AAAEN,UAAAA,YAAY;AAAI,SADrC;AAAA,gCAEI;AAAA,oBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGMH,MAAM,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAiB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAH7B;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAGV,OAAO,CAAEE,MAAM,CAACiB,gBAAT,EAA2B;AAAE,WAACjB,MAAM,CAACkB,IAAR,GAAgBV;AAAlB,SAA3B,CAAxB;AAAA,kBACMW,KAAK,CAACC,OAAN,CAAcd,OAAO,CAACM,GAAR,CAAYP,OAAO,GAAC,UAApB,CAAd,kBACE;AAAA,oBACCQ,OAAO,CAACQ,GAAR,CAAY,CAACC,MAAD,EAASC,CAAT,kBACT;AAAA,uBACED,MAAM,CAACE,sBAAP,iBACF;AAAA,wBACKF,MAAM,CAACE;AADZ;AAAA;AAAA;AAAA;AAAA,oBAFA,eAMA;AAAA,qCACI;AAAA,2BACKF,MAAM,CAACT,OADZ,EAEMS,MAAM,CAACG,YAAP,iBACE,QAAC,SAAD;AAAW,kBAAA,SAAS,EAAC,MAArB;AAAA,4BACKH,MAAM,CAACG;AADZ,mBAAiCF,CAAjC;AAAA;AAAA;AAAA;AAAA,wBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBANA;AAAA,aAAcA,CAAd;AAAA;AAAA;AAAA;AAAA,kBADH;AADD;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ,mBADJ;AAuCH;;GAxDQnB,S;;KAAAA,S;AAwDR;AAED,eAAeA,SAAf","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport classes from 'classnames';\nimport Highlight from 'react-highlight';\nimport styles from '../styles/accordion.module.scss';\nimport {ReactComponent as ArrowUp} from '../images/icons/arrow-up.svg';\nimport {ReactComponent as ArrowDown} from '../images/icons/arrow-down.svg';\n\n\nfunction Accordion({ section, project, closeAccordion }) {\n\n    const [ isOpen, setIsOpen ] = useState(false);\n    \n     if (closeAccordion === true) {\n    //     //setIsOpen(false);\n    //     console.log('close it')\n    };\n\n    // toggle the state of the accordion, triggered onClick\n    function handleToggle() {\n        setIsOpen(!isOpen);\n    };\n\n    let header = project.acf[section+\"_header\"];\n    let content = project.acf[section+\"_content\"];\n\n    return (\n        <>\n            {/* only render an accordion if content exists */}\n            {content &&\n            <section className={styles.accordionSection}>\n                <div className={classes(styles.accordionHeader, (isOpen && styles.headerActive))}\n                    onClick={() => { handleToggle() } }>\n                    <h2>{header}</h2>\n                    { isOpen ? <ArrowUp /> : <ArrowDown /> }\n                </div>\n                <div className={ classes( styles.accordionContent, { [styles.open] : isOpen} ) }>\n                    { Array.isArray(project.acf[section+\"_content\"]) &&\n                        <section>\n                        {content.map((oneRow, i) => \n                            <section key={i}>\n                            { oneRow.development_sub_header && \n                            <h3>\n                                {oneRow.development_sub_header}\n                            </h3>\n                            }\n                            <ul>\n                                <li>\n                                    {oneRow.content}\n                                    { oneRow.code_snippet &&\n                                        <Highlight className=\"hljs\" key={i}>\n                                            {oneRow.code_snippet}\n                                        </Highlight>\n                                    }\n                                </li>\n                            </ul>\n                        </section>\n                        )}\n                        </section>\n                    }\n                </div> \n            </section>\n            }\n        </>\n    )\n};\n\nexport default Accordion;"]},"metadata":{},"sourceType":"module"}